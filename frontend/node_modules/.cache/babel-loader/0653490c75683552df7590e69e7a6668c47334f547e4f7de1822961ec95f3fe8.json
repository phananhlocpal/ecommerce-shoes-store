{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { variables } from '../../utils/api/variables.js';\n\n// Ngưỡng miễn phí giao hàng\nexport const DELIVERY_THRESHOLD = 1200;\n\n// Thunk để tải cart từ database hoặc localStorage\nexport const loadCart = createAsyncThunk('cart/loadCart', async () => {\n  const userFromLS = localStorage.getItem('user');\n  let isAuthenticated = false;\n  if (userFromLS) {\n    const parsedUser = JSON.parse(userFromLS); // Parse the string into a JavaScript object\n    isAuthenticated = parsedUser.token; // Check if the token exists\n    console.log('Token:', parsedUser.token);\n  }\n  if (isAuthenticated) {\n    const cartID = localStorage.getItem('cartId');\n    const response = await axios.get(`${variables.CART_ITEM_API}/${cartID}`);\n    console.log('response from item database', response.data);\n    // Lặp qua danh sách các items và xử lý mỗi item\n    const cartItems = response.data && response.data.length > 0 ? response.data.map(item => ({\n      product: item.product,\n      size: '40',\n      quantity: item.quantity,\n      price: item.product.price,\n      cartItemId: item.cartItemID\n    })) : [];\n    console.log('cartItems:', cartItems);\n    return cartItems || [];\n  } else {\n    const localCart = localStorage.getItem('cartItems');\n    console.log('localCart:', localCart);\n    return localCart ? JSON.parse(localCart) : [];\n  }\n});\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    subtotal: 0,\n    delivery: 0,\n    discount: 0,\n    total: 0\n  },\n  reducers: {\n    addToCart: (state, action) => {\n      const {\n        product,\n        size,\n        quantity = 1,\n        price\n      } = action.payload;\n\n      // Check if the product with the same id and size already exists in the cart\n      const existingItem = state.items.find(item => item.product.productID === product.productID);\n      if (existingItem) {\n        // If the item exists, increase the quantity\n        existingItem.quantity += quantity;\n\n        // If authenticated, update the cart in the database\n        const isAuthenticated = localStorage.getItem('user').token !== null;\n        console.log({\n          cartId: localStorage.getItem('cartId'),\n          cartItemID: existingItem.cartItemId,\n          productId: product.productID,\n          quantity: existingItem.quantity\n        });\n        if (isAuthenticated) {\n          axios.put(`${variables.CART_ITEM_API}`, {\n            cartId: localStorage.getItem('cartId'),\n            cartItemID: existingItem.cartItemID,\n            productId: product.productID,\n            quantity: existingItem.quantity\n          }).then(() => console.log('Cart item updated in database')).catch(err => console.error('Error updating cart item:', err));\n        } else {\n          // If the user is not authenticated, save to localStorage\n          localStorage.setItem('cartItems', JSON.stringify(state.items));\n        }\n      } else {\n        // If the item doesn't exist, add a new item to the cart\n        state.items.push({\n          product,\n          size,\n          quantity,\n          price\n        });\n        const isAuthenticated = localStorage.getItem('user').token !== null;\n        if (isAuthenticated) {\n          const cartId = localStorage.getItem('cartId');\n          const newCartItem = {\n            cartId: cartId,\n            productId: product.productID,\n            quantity: quantity\n          };\n          console.log(newCartItem);\n\n          // Send the POST request to the backend to save the cart item to the database\n          axios.post(`${variables.CART_ITEM_API}`, newCartItem).then(() => console.log('Cart item saved to database')).catch(err => console.error('Error saving cart item:', err));\n        } else {\n          // If the user is not authenticated, save to localStorage\n          localStorage.setItem('cartItems', JSON.stringify(state.items));\n        }\n      }\n    },\n    removeFromCart: (state, action) => {\n      const {\n        product,\n        size\n      } = action.payload;\n      state.items = state.items.filter(item => item.product.id !== product.id || item.size !== size);\n      const isAuthenticated = localStorage.getItem('user').token !== null;\n      if (isAuthenticated) {\n        axios.put(`${variables.CART_API}`, {\n          items: state.items\n        }).then(() => console.log('Cart updated in database')).catch(err => console.error('Error updating cart:', err));\n      } else {\n        localStorage.setItem('cartItems', JSON.stringify(state.items));\n      }\n    },\n    updateQuantity: (state, action) => {\n      const {\n        productId,\n        size,\n        quantity\n      } = action.payload;\n      const cartItemIndex = state.items.findIndex(item => item.product.id === productId && item.size === size);\n      if (cartItemIndex !== -1) {\n        state.items[cartItemIndex].quantity = quantity;\n        const isAuthenticated = localStorage.getItem('user').token !== null;\n        if (isAuthenticated) {\n          axios.put(`${variables.CART_API}`, {\n            items: state.items\n          }).then(() => console.log('Cart updated in database')).catch(err => console.error('Error updating cart:', err));\n        } else {\n          localStorage.setItem('cartItems', JSON.stringify(state.items));\n        }\n      }\n    },\n    clearCart: state => {\n      state.items = [];\n      const isAuthenticated = localStorage.getItem('user').token !== null;\n      if (isAuthenticated) {\n        axios.delete(`${variables.CART_API}`).then(() => console.log('Cart cleared in database')).catch(err => console.error('Error clearing cart:', err));\n      } else {\n        localStorage.removeItem('cartItems');\n      }\n    },\n    calculateSubtotal: state => {\n      const subtotal = state.items.reduce((acc, item) => acc + item.price * item.quantity, 0);\n      if (subtotal >= DELIVERY_THRESHOLD) {\n        state.delivery = 0;\n        state.subtotal = subtotal;\n      } else {\n        state.delivery = 60;\n        state.subtotal = subtotal;\n      }\n    },\n    updateDelivery: (state, action) => {\n      state.delivery = action.payload.deliveryCost;\n    },\n    applyDiscount: (state, action) => {\n      state.discount = action.payload.discount;\n    },\n    getTotal: state => {\n      state.total = state.subtotal - state.subtotal * state.discount + state.delivery;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loadCart.fulfilled, (state, action) => {\n      console.log('Cart loaded from database:', action.payload);\n      state.items = action.payload;\n    });\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  updateQuantity,\n  clearCart,\n  calculateSubtotal,\n  updateDelivery,\n  applyDiscount,\n  getTotal\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","variables","DELIVERY_THRESHOLD","loadCart","userFromLS","localStorage","getItem","isAuthenticated","parsedUser","JSON","parse","token","console","log","cartID","response","get","CART_ITEM_API","data","cartItems","length","map","item","product","size","quantity","price","cartItemId","cartItemID","localCart","cartSlice","name","initialState","items","subtotal","delivery","discount","total","reducers","addToCart","state","action","payload","existingItem","find","productID","cartId","productId","put","then","catch","err","error","setItem","stringify","push","newCartItem","post","removeFromCart","filter","id","CART_API","updateQuantity","cartItemIndex","findIndex","clearCart","delete","removeItem","calculateSubtotal","reduce","acc","updateDelivery","deliveryCost","applyDiscount","getTotal","extraReducers","builder","addCase","fulfilled","actions","reducer"],"sources":["C:/Users/Surface/Documents/Pal/myproject/ecommerce-app-ms-sql-net-react-main/frontend/src/store/reducers/cartSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { variables } from '../../utils/api/variables.js';\n\n// Ngưỡng miễn phí giao hàng\nexport const DELIVERY_THRESHOLD = 1200;\n\n// Thunk để tải cart từ database hoặc localStorage\nexport const loadCart = createAsyncThunk('cart/loadCart', async () => {\n  const userFromLS = localStorage.getItem('user');\n  let isAuthenticated = false;\n\n  if (userFromLS) {\n    const parsedUser = JSON.parse(userFromLS); // Parse the string into a JavaScript object\n    isAuthenticated = parsedUser.token; // Check if the token exists\n    console.log('Token:', parsedUser.token);\n  }\n\n  if (isAuthenticated) {\n    const cartID = localStorage.getItem('cartId');\n    const response = await axios.get(`${variables.CART_ITEM_API}/${cartID}`);\n    console.log('response from item database', response.data);\n    // Lặp qua danh sách các items và xử lý mỗi item\n    const cartItems = (response.data && response.data.length > 0) ?\n      response.data.map(item => ({\n        product: item.product,\n        size: '40',\n        quantity: item.quantity,\n        price: item.product.price,\n        cartItemId: item.cartItemID,\n      })) : [];\n    console.log('cartItems:', cartItems);\n\n    return cartItems || [];\n  } else {\n    const localCart = localStorage.getItem('cartItems');\n    console.log('localCart:', localCart);\n    return localCart ? JSON.parse(localCart) : [];\n  }\n});\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    subtotal: 0,\n    delivery: 0,\n    discount: 0,\n    total: 0,\n  },\n  reducers: {\n    addToCart: (state, action) => {\n      const { product, size, quantity = 1, price } = action.payload;\n    \n      // Check if the product with the same id and size already exists in the cart\n      const existingItem = state.items.find(\n        (item) => item.product.productID === product.productID \n      );\n    \n      if (existingItem) {\n        // If the item exists, increase the quantity\n        existingItem.quantity += quantity;\n    \n        // If authenticated, update the cart in the database\n        const isAuthenticated = localStorage.getItem('user').token !== null;\n        console.log({\n          cartId: localStorage.getItem('cartId'),\n          cartItemID: existingItem.cartItemId,\n          productId: product.productID,\n          quantity: existingItem.quantity,\n        });\n        if (isAuthenticated) {\n          axios\n            .put(`${variables.CART_ITEM_API}`, {\n              cartId: localStorage.getItem('cartId'),\n              cartItemID: existingItem.cartItemID,\n              productId: product.productID,\n              quantity: existingItem.quantity,\n            })\n            .then(() => console.log('Cart item updated in database'))\n            .catch((err) => console.error('Error updating cart item:', err));\n        } else {\n          // If the user is not authenticated, save to localStorage\n          localStorage.setItem('cartItems', JSON.stringify(state.items));\n        }\n      } else {\n        // If the item doesn't exist, add a new item to the cart\n        state.items.push({ product, size, quantity, price });\n    \n        const isAuthenticated = localStorage.getItem('user').token !== null;\n        if (isAuthenticated) {\n          const cartId = localStorage.getItem('cartId');\n    \n          const newCartItem = {\n            cartId: cartId,\n            productId: product.productID,\n            quantity: quantity,\n          };\n    \n          console.log(newCartItem);\n    \n          // Send the POST request to the backend to save the cart item to the database\n          axios\n            .post(`${variables.CART_ITEM_API}`, newCartItem)\n            .then(() => console.log('Cart item saved to database'))\n            .catch((err) => console.error('Error saving cart item:', err));\n        } else {\n          // If the user is not authenticated, save to localStorage\n          localStorage.setItem('cartItems', JSON.stringify(state.items));\n        }\n      }\n    },    \n\n    removeFromCart: (state, action) => {\n      const { product, size } = action.payload;\n      state.items = state.items.filter(\n        (item) => item.product.id !== product.id || item.size !== size\n      );\n\n      const isAuthenticated = localStorage.getItem('user').token !== null;\n\n      if (isAuthenticated) {\n        axios\n          .put(`${variables.CART_API}`, { items: state.items })\n          .then(() => console.log('Cart updated in database'))\n          .catch((err) => console.error('Error updating cart:', err));\n      } else {\n        localStorage.setItem('cartItems', JSON.stringify(state.items));\n      }\n    },\n\n    updateQuantity: (state, action) => {\n      const { productId, size, quantity } = action.payload;\n      const cartItemIndex = state.items.findIndex(\n        (item) => item.product.id === productId && item.size === size\n      );\n\n      if (cartItemIndex !== -1) {\n        state.items[cartItemIndex].quantity = quantity;\n\n        const isAuthenticated = localStorage.getItem('user').token !== null;\n\n        if (isAuthenticated) {\n          axios\n            .put(`${variables.CART_API}`, { items: state.items })\n            .then(() => console.log('Cart updated in database'))\n            .catch((err) => console.error('Error updating cart:', err));\n        } else {\n          localStorage.setItem('cartItems', JSON.stringify(state.items));\n        }\n      }\n    },\n\n    clearCart: (state) => {\n      state.items = [];\n\n      const isAuthenticated = localStorage.getItem('user').token !== null;\n\n      if (isAuthenticated) {\n        axios\n          .delete(`${variables.CART_API}`)\n          .then(() => console.log('Cart cleared in database'))\n          .catch((err) => console.error('Error clearing cart:', err));\n      } else {\n        localStorage.removeItem('cartItems');\n      }\n    },\n\n    calculateSubtotal: (state) => {\n      const subtotal = state.items.reduce(\n        (acc, item) => acc + item.price * item.quantity,\n        0\n      );\n\n      if (subtotal >= DELIVERY_THRESHOLD) {\n        state.delivery = 0;\n        state.subtotal = subtotal;\n      } else {\n        state.delivery = 60;\n        state.subtotal = subtotal;\n      }\n    },\n\n    updateDelivery: (state, action) => {\n      state.delivery = action.payload.deliveryCost;\n    },\n\n    applyDiscount: (state, action) => {\n      state.discount = action.payload.discount;\n    },\n\n    getTotal: (state) => {\n      state.total = state.subtotal - state.subtotal * state.discount + state.delivery;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(loadCart.fulfilled, (state, action) => {\n      console.log('Cart loaded from database:', action.payload);\n      state.items = action.payload;\n    });\n  },\n});\n\nexport const {\n  addToCart,\n  removeFromCart,\n  updateQuantity,\n  clearCart,\n  calculateSubtotal,\n  updateDelivery,\n  applyDiscount,\n  getTotal,\n} = cartSlice.actions;\n\nexport default cartSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,8BAA8B;;AAExD;AACA,OAAO,MAAMC,kBAAkB,GAAG,IAAI;;AAEtC;AACA,OAAO,MAAMC,QAAQ,GAAGJ,gBAAgB,CAAC,eAAe,EAAE,YAAY;EACpE,MAAMK,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC/C,IAAIC,eAAe,GAAG,KAAK;EAE3B,IAAIH,UAAU,EAAE;IACd,MAAMI,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACN,UAAU,CAAC,CAAC,CAAC;IAC3CG,eAAe,GAAGC,UAAU,CAACG,KAAK,CAAC,CAAC;IACpCC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEL,UAAU,CAACG,KAAK,CAAC;EACzC;EAEA,IAAIJ,eAAe,EAAE;IACnB,MAAMO,MAAM,GAAGT,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC7C,MAAMS,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAE,GAAEf,SAAS,CAACgB,aAAc,IAAGH,MAAO,EAAC,CAAC;IACxEF,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEE,QAAQ,CAACG,IAAI,CAAC;IACzD;IACA,MAAMC,SAAS,GAAIJ,QAAQ,CAACG,IAAI,IAAIH,QAAQ,CAACG,IAAI,CAACE,MAAM,GAAG,CAAC,GAC1DL,QAAQ,CAACG,IAAI,CAACG,GAAG,CAACC,IAAI,KAAK;MACzBC,OAAO,EAAED,IAAI,CAACC,OAAO;MACrBC,IAAI,EAAE,IAAI;MACVC,QAAQ,EAAEH,IAAI,CAACG,QAAQ;MACvBC,KAAK,EAAEJ,IAAI,CAACC,OAAO,CAACG,KAAK;MACzBC,UAAU,EAAEL,IAAI,CAACM;IACnB,CAAC,CAAC,CAAC,GAAG,EAAE;IACVhB,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEM,SAAS,CAAC;IAEpC,OAAOA,SAAS,IAAI,EAAE;EACxB,CAAC,MAAM;IACL,MAAMU,SAAS,GAAGxB,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACnDM,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEgB,SAAS,CAAC;IACpC,OAAOA,SAAS,GAAGpB,IAAI,CAACC,KAAK,CAACmB,SAAS,CAAC,GAAG,EAAE;EAC/C;AACF,CAAC,CAAC;AAEF,MAAMC,SAAS,GAAGhC,WAAW,CAAC;EAC5BiC,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,CAAC;IACXC,QAAQ,EAAE,CAAC;IACXC,QAAQ,EAAE,CAAC;IACXC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5B,MAAM;QAAElB,OAAO;QAAEC,IAAI;QAAEC,QAAQ,GAAG,CAAC;QAAEC;MAAM,CAAC,GAAGe,MAAM,CAACC,OAAO;;MAE7D;MACA,MAAMC,YAAY,GAAGH,KAAK,CAACP,KAAK,CAACW,IAAI,CAClCtB,IAAI,IAAKA,IAAI,CAACC,OAAO,CAACsB,SAAS,KAAKtB,OAAO,CAACsB,SAAS,CACvD;MAED,IAAIF,YAAY,EAAE;QAChB;QACAA,YAAY,CAAClB,QAAQ,IAAIA,QAAQ;;QAEjC;QACA,MAAMlB,eAAe,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAACK,KAAK,KAAK,IAAI;QACnEC,OAAO,CAACC,GAAG,CAAC;UACViC,MAAM,EAAEzC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;UACtCsB,UAAU,EAAEe,YAAY,CAAChB,UAAU;UACnCoB,SAAS,EAAExB,OAAO,CAACsB,SAAS;UAC5BpB,QAAQ,EAAEkB,YAAY,CAAClB;QACzB,CAAC,CAAC;QACF,IAAIlB,eAAe,EAAE;UACnBP,KAAK,CACFgD,GAAG,CAAE,GAAE/C,SAAS,CAACgB,aAAc,EAAC,EAAE;YACjC6B,MAAM,EAAEzC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;YACtCsB,UAAU,EAAEe,YAAY,CAACf,UAAU;YACnCmB,SAAS,EAAExB,OAAO,CAACsB,SAAS;YAC5BpB,QAAQ,EAAEkB,YAAY,CAAClB;UACzB,CAAC,CAAC,CACDwB,IAAI,CAAC,MAAMrC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAAC,CACxDqC,KAAK,CAAEC,GAAG,IAAKvC,OAAO,CAACwC,KAAK,CAAC,2BAA2B,EAAED,GAAG,CAAC,CAAC;QACpE,CAAC,MAAM;UACL;UACA9C,YAAY,CAACgD,OAAO,CAAC,WAAW,EAAE5C,IAAI,CAAC6C,SAAS,CAACd,KAAK,CAACP,KAAK,CAAC,CAAC;QAChE;MACF,CAAC,MAAM;QACL;QACAO,KAAK,CAACP,KAAK,CAACsB,IAAI,CAAC;UAAEhC,OAAO;UAAEC,IAAI;UAAEC,QAAQ;UAAEC;QAAM,CAAC,CAAC;QAEpD,MAAMnB,eAAe,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAACK,KAAK,KAAK,IAAI;QACnE,IAAIJ,eAAe,EAAE;UACnB,MAAMuC,MAAM,GAAGzC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;UAE7C,MAAMkD,WAAW,GAAG;YAClBV,MAAM,EAAEA,MAAM;YACdC,SAAS,EAAExB,OAAO,CAACsB,SAAS;YAC5BpB,QAAQ,EAAEA;UACZ,CAAC;UAEDb,OAAO,CAACC,GAAG,CAAC2C,WAAW,CAAC;;UAExB;UACAxD,KAAK,CACFyD,IAAI,CAAE,GAAExD,SAAS,CAACgB,aAAc,EAAC,EAAEuC,WAAW,CAAC,CAC/CP,IAAI,CAAC,MAAMrC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAAC,CACtDqC,KAAK,CAAEC,GAAG,IAAKvC,OAAO,CAACwC,KAAK,CAAC,yBAAyB,EAAED,GAAG,CAAC,CAAC;QAClE,CAAC,MAAM;UACL;UACA9C,YAAY,CAACgD,OAAO,CAAC,WAAW,EAAE5C,IAAI,CAAC6C,SAAS,CAACd,KAAK,CAACP,KAAK,CAAC,CAAC;QAChE;MACF;IACF,CAAC;IAEDyB,cAAc,EAAEA,CAAClB,KAAK,EAAEC,MAAM,KAAK;MACjC,MAAM;QAAElB,OAAO;QAAEC;MAAK,CAAC,GAAGiB,MAAM,CAACC,OAAO;MACxCF,KAAK,CAACP,KAAK,GAAGO,KAAK,CAACP,KAAK,CAAC0B,MAAM,CAC7BrC,IAAI,IAAKA,IAAI,CAACC,OAAO,CAACqC,EAAE,KAAKrC,OAAO,CAACqC,EAAE,IAAItC,IAAI,CAACE,IAAI,KAAKA,IAAI,CAC/D;MAED,MAAMjB,eAAe,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAACK,KAAK,KAAK,IAAI;MAEnE,IAAIJ,eAAe,EAAE;QACnBP,KAAK,CACFgD,GAAG,CAAE,GAAE/C,SAAS,CAAC4D,QAAS,EAAC,EAAE;UAAE5B,KAAK,EAAEO,KAAK,CAACP;QAAM,CAAC,CAAC,CACpDgB,IAAI,CAAC,MAAMrC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC,CAAC,CACnDqC,KAAK,CAAEC,GAAG,IAAKvC,OAAO,CAACwC,KAAK,CAAC,sBAAsB,EAAED,GAAG,CAAC,CAAC;MAC/D,CAAC,MAAM;QACL9C,YAAY,CAACgD,OAAO,CAAC,WAAW,EAAE5C,IAAI,CAAC6C,SAAS,CAACd,KAAK,CAACP,KAAK,CAAC,CAAC;MAChE;IACF,CAAC;IAED6B,cAAc,EAAEA,CAACtB,KAAK,EAAEC,MAAM,KAAK;MACjC,MAAM;QAAEM,SAAS;QAAEvB,IAAI;QAAEC;MAAS,CAAC,GAAGgB,MAAM,CAACC,OAAO;MACpD,MAAMqB,aAAa,GAAGvB,KAAK,CAACP,KAAK,CAAC+B,SAAS,CACxC1C,IAAI,IAAKA,IAAI,CAACC,OAAO,CAACqC,EAAE,KAAKb,SAAS,IAAIzB,IAAI,CAACE,IAAI,KAAKA,IAAI,CAC9D;MAED,IAAIuC,aAAa,KAAK,CAAC,CAAC,EAAE;QACxBvB,KAAK,CAACP,KAAK,CAAC8B,aAAa,CAAC,CAACtC,QAAQ,GAAGA,QAAQ;QAE9C,MAAMlB,eAAe,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAACK,KAAK,KAAK,IAAI;QAEnE,IAAIJ,eAAe,EAAE;UACnBP,KAAK,CACFgD,GAAG,CAAE,GAAE/C,SAAS,CAAC4D,QAAS,EAAC,EAAE;YAAE5B,KAAK,EAAEO,KAAK,CAACP;UAAM,CAAC,CAAC,CACpDgB,IAAI,CAAC,MAAMrC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC,CAAC,CACnDqC,KAAK,CAAEC,GAAG,IAAKvC,OAAO,CAACwC,KAAK,CAAC,sBAAsB,EAAED,GAAG,CAAC,CAAC;QAC/D,CAAC,MAAM;UACL9C,YAAY,CAACgD,OAAO,CAAC,WAAW,EAAE5C,IAAI,CAAC6C,SAAS,CAACd,KAAK,CAACP,KAAK,CAAC,CAAC;QAChE;MACF;IACF,CAAC;IAEDgC,SAAS,EAAGzB,KAAK,IAAK;MACpBA,KAAK,CAACP,KAAK,GAAG,EAAE;MAEhB,MAAM1B,eAAe,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAACK,KAAK,KAAK,IAAI;MAEnE,IAAIJ,eAAe,EAAE;QACnBP,KAAK,CACFkE,MAAM,CAAE,GAAEjE,SAAS,CAAC4D,QAAS,EAAC,CAAC,CAC/BZ,IAAI,CAAC,MAAMrC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC,CAAC,CACnDqC,KAAK,CAAEC,GAAG,IAAKvC,OAAO,CAACwC,KAAK,CAAC,sBAAsB,EAAED,GAAG,CAAC,CAAC;MAC/D,CAAC,MAAM;QACL9C,YAAY,CAAC8D,UAAU,CAAC,WAAW,CAAC;MACtC;IACF,CAAC;IAEDC,iBAAiB,EAAG5B,KAAK,IAAK;MAC5B,MAAMN,QAAQ,GAAGM,KAAK,CAACP,KAAK,CAACoC,MAAM,CACjC,CAACC,GAAG,EAAEhD,IAAI,KAAKgD,GAAG,GAAGhD,IAAI,CAACI,KAAK,GAAGJ,IAAI,CAACG,QAAQ,EAC/C,CAAC,CACF;MAED,IAAIS,QAAQ,IAAIhC,kBAAkB,EAAE;QAClCsC,KAAK,CAACL,QAAQ,GAAG,CAAC;QAClBK,KAAK,CAACN,QAAQ,GAAGA,QAAQ;MAC3B,CAAC,MAAM;QACLM,KAAK,CAACL,QAAQ,GAAG,EAAE;QACnBK,KAAK,CAACN,QAAQ,GAAGA,QAAQ;MAC3B;IACF,CAAC;IAEDqC,cAAc,EAAEA,CAAC/B,KAAK,EAAEC,MAAM,KAAK;MACjCD,KAAK,CAACL,QAAQ,GAAGM,MAAM,CAACC,OAAO,CAAC8B,YAAY;IAC9C,CAAC;IAEDC,aAAa,EAAEA,CAACjC,KAAK,EAAEC,MAAM,KAAK;MAChCD,KAAK,CAACJ,QAAQ,GAAGK,MAAM,CAACC,OAAO,CAACN,QAAQ;IAC1C,CAAC;IAEDsC,QAAQ,EAAGlC,KAAK,IAAK;MACnBA,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACN,QAAQ,GAAGM,KAAK,CAACN,QAAQ,GAAGM,KAAK,CAACJ,QAAQ,GAAGI,KAAK,CAACL,QAAQ;IACjF;EACF,CAAC;EACDwC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAAC1E,QAAQ,CAAC2E,SAAS,EAAE,CAACtC,KAAK,EAAEC,MAAM,KAAK;MACrD7B,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE4B,MAAM,CAACC,OAAO,CAAC;MACzDF,KAAK,CAACP,KAAK,GAAGQ,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXH,SAAS;EACTmB,cAAc;EACdI,cAAc;EACdG,SAAS;EACTG,iBAAiB;EACjBG,cAAc;EACdE,aAAa;EACbC;AACF,CAAC,GAAG5C,SAAS,CAACiD,OAAO;AAErB,eAAejD,SAAS,CAACkD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}