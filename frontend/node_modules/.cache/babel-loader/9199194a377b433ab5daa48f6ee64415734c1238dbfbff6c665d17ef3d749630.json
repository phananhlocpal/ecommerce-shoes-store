{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { variables } from '../../utils/api/variables.js';\nimport { selectCurrentUser } from './userSlice.js';\nimport { useSelector } from 'react-redux';\n\n// Ngưỡng miễn phí giao hàng\nexport const DELIVERY_THRESHOLD = 1200;\nconst checkIsAuthenticated = () => {\n  _s();\n  const currentUser = useSelector(selectCurrentUser);\n  return currentUser !== null;\n};\n\n// Thunk để tải cart từ database hoặc localStorage\n_s(checkIsAuthenticated, \"lZdPyK/MobwtETtTACdKAch84Kw=\", false, function () {\n  return [useSelector];\n});\nexport const loadCart = createAsyncThunk('cart/loadCart', async () => {\n  if (checkIsAuthenticated) {\n    const cartID = localStorage.getItem('cartId');\n    const response = await axios.get(`${variables.CART_ITEM_API}/${cartID}`);\n    console.log('response from item database', response.data);\n    // Lặp qua danh sách các items và xử lý mỗi item\n    const cartItems = response.data && response.data.length > 0 ? response.data.map(item => ({\n      product: item.product,\n      size: '40',\n      quantity: item.quantity,\n      price: item.product.price,\n      cartItemID: item.cartItemID\n    })) : [];\n    console.log('cartItems:', cartItems);\n    return cartItems || [];\n  } else {\n    const localCart = localStorage.getItem('cartItems');\n    console.log('localCart:', localCart);\n    return localCart ? JSON.parse(localCart) : [];\n  }\n});\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    subtotal: 0,\n    delivery: 0,\n    discount: 0,\n    total: 0\n  },\n  reducers: {\n    addToCart: (state, action) => {\n      const {\n        product,\n        size,\n        quantity = 1,\n        price\n      } = action.payload;\n\n      // Check if the product with the same id and size already exists in the cart\n      const existingItem = state.items.find(item => item.product.productID === product.productID);\n      if (existingItem) {\n        // If the item exists, increase the quantity\n        existingItem.quantity += quantity;\n\n        // If authenticated, update the cart in the database\n        const isAuthenticated = localStorage.getItem('user').token !== null;\n        console.log({\n          cartId: localStorage.getItem('cartId'),\n          cartItemID: existingItem.cartItemID,\n          productId: product.productID,\n          quantity: existingItem.quantity\n        });\n        const cartItemID = existingItem.cartItemID;\n        if (isAuthenticated) {\n          axios.put(`${variables.CART_ITEM_API}/${cartItemID}`, {\n            cartId: localStorage.getItem('cartId'),\n            cartItemID: existingItem.cartItemID,\n            productId: product.productID,\n            quantity: existingItem.quantity,\n            productSizeId: size\n          }).then(() => console.log('Cart item updated in database')).catch(err => console.error('Error updating cart item:', err));\n        } else {\n          // If the user is not authenticated, save to localStorage\n          localStorage.setItem('cartItems', JSON.stringify(state.items));\n        }\n      } else {\n        // If the item doesn't exist, add a new item to the cart\n        state.items.push({\n          product,\n          size,\n          quantity,\n          price\n        });\n        const isAuthenticated = localStorage.getItem('user').token !== null;\n        if (isAuthenticated) {\n          const cartId = localStorage.getItem('cartId');\n          const newCartItem = {\n            cartId: cartId,\n            productId: product.productID,\n            quantity: quantity,\n            productSizeId: size\n          };\n          console.log(newCartItem);\n\n          // Send the POST request to the backend to save the cart item to the database\n          axios.post(`${variables.CART_ITEM_API}`, newCartItem).then(() => console.log('Cart item saved to database')).catch(err => console.error('Error saving cart item:', err));\n        } else {\n          // If the user is not authenticated, save to localStorage\n          localStorage.setItem('cartItems', JSON.stringify(state.items));\n        }\n      }\n    },\n    removeFromCart: (state, action) => {\n      var _JSON$parse;\n      const {\n        product\n      } = action.payload;\n\n      // Tìm item cần xóa\n      const itemToRemove = state.items.find(item => item.product.productID === product.productID);\n      if (!itemToRemove) {\n        console.error(\"Item to remove not found in cart\");\n        return;\n      }\n\n      // Cập nhật state.items\n      state.items = state.items.filter(item => item.product.productID !== product.productID);\n      console.log('Current cart items after removal:', state.items);\n\n      // Xử lý API call nếu user đã đăng nhập\n      const isAuthenticated = ((_JSON$parse = JSON.parse(localStorage.getItem('user'))) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse.token) !== null;\n      if (isAuthenticated) {\n        const cartItemID = itemToRemove.cartItemID;\n        axios.delete(`${variables.CART_ITEM_API}/${cartItemID}`).then(() => console.log('Cart item removed from database')).catch(err => console.error('Error removing cart item:', err));\n      } else {\n        localStorage.setItem('cartItems', JSON.stringify(state.items));\n      }\n\n      // Tự động tính lại subtotal, delivery, và total sau khi xóa\n      const subtotal = state.items.reduce((acc, item) => acc + item.price * item.quantity, 0);\n      state.subtotal = subtotal;\n      state.delivery = subtotal >= DELIVERY_THRESHOLD ? 0 : 60;\n      state.total = subtotal + state.delivery - state.subtotal * state.discount;\n    },\n    updateQuantity: (state, action) => {\n      const {\n        productId,\n        quantity\n      } = action.payload;\n      console.log(action.payload);\n      // Find the index of the item in the cart\n      const cartItemIndex = state.items.findIndex(item => item.product.productID === productId);\n      if (cartItemIndex !== -1) {\n        var _JSON$parse2;\n        // Update the quantity of the existing item (create a new state for immutability)\n        state.items[cartItemIndex] = {\n          ...state.items[cartItemIndex],\n          quantity: quantity\n        };\n        const isAuthenticated = ((_JSON$parse2 = JSON.parse(localStorage.getItem('user'))) === null || _JSON$parse2 === void 0 ? void 0 : _JSON$parse2.token) !== null;\n        if (isAuthenticated) {\n          // Only update the specific cart item in the database\n          const updatedCartItem = state.items[cartItemIndex];\n          const cartId = localStorage.getItem('cartId');\n          const updatedItem = {\n            cartItemID: updatedCartItem.cartItemID,\n            cartId: cartId,\n            productId: updatedCartItem.product.productID,\n            quantity: updatedCartItem.quantity\n          };\n\n          // Send the updated cart item to the server\n          axios.put(`${variables.CART_ITEM_API}/${updatedCartItem.cartItemID}`, updatedItem).then(() => console.log('Cart item updated in database')).catch(err => console.error('Error updating cart item:', err));\n        } else {\n          // If the user is not authenticated, update localStorage\n          localStorage.setItem('cartItems', JSON.stringify(state.items));\n        }\n      }\n    },\n    clearCart: state => {\n      state.items = [];\n      const isAuthenticated = localStorage.getItem('user').token !== null;\n      if (isAuthenticated) {\n        axios.delete(`${variables.CART_API}`).then(() => console.log('Cart cleared in database')).catch(err => console.error('Error clearing cart:', err));\n      } else {\n        localStorage.removeItem('cartItems');\n      }\n    },\n    calculateSubtotal: state => {\n      const subtotal = state.items.reduce((acc, item) => acc + item.price * item.quantity, 0);\n      if (subtotal >= DELIVERY_THRESHOLD) {\n        state.delivery = 0;\n        state.subtotal = subtotal;\n      } else {\n        state.delivery = 60;\n        state.subtotal = subtotal;\n      }\n    },\n    updateDelivery: (state, action) => {\n      state.delivery = action.payload.deliveryCost;\n    },\n    applyDiscount: (state, action) => {\n      state.discount = action.payload.discount;\n    },\n    getTotal: state => {\n      state.total = state.subtotal - state.subtotal * state.discount + state.delivery;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loadCart.fulfilled, (state, action) => {\n      console.log('Cart loaded from database:', action.payload);\n      state.items = action.payload;\n    });\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  updateQuantity,\n  clearCart,\n  calculateSubtotal,\n  updateDelivery,\n  applyDiscount,\n  getTotal\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","variables","selectCurrentUser","useSelector","DELIVERY_THRESHOLD","checkIsAuthenticated","_s","currentUser","loadCart","cartID","localStorage","getItem","response","get","CART_ITEM_API","console","log","data","cartItems","length","map","item","product","size","quantity","price","cartItemID","localCart","JSON","parse","cartSlice","name","initialState","items","subtotal","delivery","discount","total","reducers","addToCart","state","action","payload","existingItem","find","productID","isAuthenticated","token","cartId","productId","put","productSizeId","then","catch","err","error","setItem","stringify","push","newCartItem","post","removeFromCart","_JSON$parse","itemToRemove","filter","delete","reduce","acc","updateQuantity","cartItemIndex","findIndex","_JSON$parse2","updatedCartItem","updatedItem","clearCart","CART_API","removeItem","calculateSubtotal","updateDelivery","deliveryCost","applyDiscount","getTotal","extraReducers","builder","addCase","fulfilled","actions","reducer"],"sources":["C:/Users/Surface/Documents/Pal/myproject/ecommerce-app-ms-sql-net-react-main/frontend/src/store/reducers/cartSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { variables } from '../../utils/api/variables.js';\nimport { selectCurrentUser } from './userSlice.js';\nimport { useSelector } from 'react-redux';\n\n// Ngưỡng miễn phí giao hàng\nexport const DELIVERY_THRESHOLD = 1200;\n\nconst checkIsAuthenticated = () => {\n  const currentUser = useSelector(selectCurrentUser);\n  return currentUser !== null;\n}\n\n// Thunk để tải cart từ database hoặc localStorage\nexport const loadCart = createAsyncThunk('cart/loadCart', async () => {\n    if (checkIsAuthenticated) {\n    const cartID = localStorage.getItem('cartId');\n    const response = await axios.get(`${variables.CART_ITEM_API}/${cartID}`);\n    console.log('response from item database', response.data);\n    // Lặp qua danh sách các items và xử lý mỗi item\n    const cartItems = (response.data && response.data.length > 0) ?\n      response.data.map(item => ({\n        product: item.product,\n        size: '40',\n        quantity: item.quantity,\n        price: item.product.price,\n        cartItemID: item.cartItemID,\n      })) : [];\n    console.log('cartItems:', cartItems);\n\n    return cartItems || [];\n  } else {\n    const localCart = localStorage.getItem('cartItems');\n    console.log('localCart:', localCart);\n    return localCart ? JSON.parse(localCart) : [];\n  }\n});\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    subtotal: 0,\n    delivery: 0,\n    discount: 0,\n    total: 0,\n  },\n  reducers: {\n    addToCart: (state, action) => {\n      const { product, size, quantity = 1, price } = action.payload;\n    \n      // Check if the product with the same id and size already exists in the cart\n      const existingItem = state.items.find(\n        (item) => item.product.productID === product.productID \n      );\n    \n      if (existingItem) {\n        // If the item exists, increase the quantity\n        existingItem.quantity += quantity;\n    \n        // If authenticated, update the cart in the database\n        const isAuthenticated = localStorage.getItem('user').token !== null;\n        console.log({\n          cartId: localStorage.getItem('cartId'),\n          cartItemID: existingItem.cartItemID,\n          productId: product.productID,\n          quantity: existingItem.quantity,\n        });\n        const cartItemID = existingItem.cartItemID;\n        if (isAuthenticated) {\n          axios\n            .put(`${variables.CART_ITEM_API}/${cartItemID}`, {\n              cartId: localStorage.getItem('cartId'),\n              cartItemID: existingItem.cartItemID,\n              productId: product.productID,\n              quantity: existingItem.quantity,\n              productSizeId: size,\n            })\n            .then(() => console.log('Cart item updated in database'))\n            .catch((err) => console.error('Error updating cart item:', err));\n        } else {\n          // If the user is not authenticated, save to localStorage\n          localStorage.setItem('cartItems', JSON.stringify(state.items));\n        }\n      } else {\n        // If the item doesn't exist, add a new item to the cart\n        state.items.push({ product, size, quantity, price });\n    \n        const isAuthenticated = localStorage.getItem('user').token !== null;\n        if (isAuthenticated) {\n          const cartId = localStorage.getItem('cartId');\n    \n          const newCartItem = {\n            cartId: cartId,\n            productId: product.productID,\n            quantity: quantity,\n            productSizeId: size,\n          };\n    \n          console.log(newCartItem);\n    \n          // Send the POST request to the backend to save the cart item to the database\n          axios\n            .post(`${variables.CART_ITEM_API}`, newCartItem)\n            .then(() => console.log('Cart item saved to database'))\n            .catch((err) => console.error('Error saving cart item:', err));\n        } else {\n          // If the user is not authenticated, save to localStorage\n          localStorage.setItem('cartItems', JSON.stringify(state.items));\n        }\n      }\n    },    \n\n    removeFromCart: (state, action) => {\n      const { product } = action.payload;\n    \n      // Tìm item cần xóa\n      const itemToRemove = state.items.find(\n        (item) => item.product.productID === product.productID\n      );\n    \n      if (!itemToRemove) {\n        console.error(\"Item to remove not found in cart\");\n        return;\n      }\n    \n      // Cập nhật state.items\n      state.items = state.items.filter(\n        (item) => item.product.productID !== product.productID\n      );\n    \n      console.log('Current cart items after removal:', state.items);\n    \n      // Xử lý API call nếu user đã đăng nhập\n      const isAuthenticated = JSON.parse(localStorage.getItem('user'))?.token !== null;\n    \n      if (isAuthenticated) {\n        const cartItemID = itemToRemove.cartItemID;\n        axios\n          .delete(`${variables.CART_ITEM_API}/${cartItemID}`)\n          .then(() => console.log('Cart item removed from database'))\n          .catch((err) => console.error('Error removing cart item:', err));\n      } else {\n        localStorage.setItem('cartItems', JSON.stringify(state.items));\n      }\n    \n      // Tự động tính lại subtotal, delivery, và total sau khi xóa\n      const subtotal = state.items.reduce(\n        (acc, item) => acc + item.price * item.quantity,\n        0\n      );\n      state.subtotal = subtotal;\n      state.delivery = subtotal >= DELIVERY_THRESHOLD ? 0 : 60;\n      state.total = subtotal + state.delivery - state.subtotal * state.discount;\n    },        \n\n    updateQuantity: (state, action) => {\n      const { productId, quantity } = action.payload;\n      console.log(action.payload)      \n      // Find the index of the item in the cart\n      const cartItemIndex = state.items.findIndex(\n        (item) => item.product.productID === productId\n      );\n      \n      if (cartItemIndex !== -1) {\n        // Update the quantity of the existing item (create a new state for immutability)\n        state.items[cartItemIndex] = {\n          ...state.items[cartItemIndex],\n          quantity: quantity,\n        };\n      \n        const isAuthenticated = JSON.parse(localStorage.getItem('user'))?.token !== null;\n      \n        if (isAuthenticated) {\n          // Only update the specific cart item in the database\n          const updatedCartItem = state.items[cartItemIndex];\n          const cartId = localStorage.getItem('cartId');\n      \n          const updatedItem = {\n            cartItemID: updatedCartItem.cartItemID,\n            cartId: cartId,\n            productId: updatedCartItem.product.productID,\n            quantity: updatedCartItem.quantity,\n          };\n      \n          // Send the updated cart item to the server\n          axios\n            .put(`${variables.CART_ITEM_API}/${updatedCartItem.cartItemID}`, updatedItem)\n            .then(() => console.log('Cart item updated in database'))\n            .catch((err) => console.error('Error updating cart item:', err));\n        } else {\n          // If the user is not authenticated, update localStorage\n          localStorage.setItem('cartItems', JSON.stringify(state.items));\n        }\n      }\n    },\n      \n\n    clearCart: (state) => {\n      state.items = [];\n\n      const isAuthenticated = localStorage.getItem('user').token !== null;\n\n      if (isAuthenticated) {\n        axios\n          .delete(`${variables.CART_API}`)\n          .then(() => console.log('Cart cleared in database'))\n          .catch((err) => console.error('Error clearing cart:', err));\n      } else {\n        localStorage.removeItem('cartItems');\n      }\n    },\n\n    calculateSubtotal: (state) => {\n      const subtotal = state.items.reduce(\n        (acc, item) => acc + item.price * item.quantity,\n        0\n      );\n\n      if (subtotal >= DELIVERY_THRESHOLD) {\n        state.delivery = 0;\n        state.subtotal = subtotal;\n      } else {\n        state.delivery = 60;\n        state.subtotal = subtotal;\n      }\n    },\n\n    updateDelivery: (state, action) => {\n      state.delivery = action.payload.deliveryCost;\n    },\n\n    applyDiscount: (state, action) => {\n      state.discount = action.payload.discount;\n    },\n\n    getTotal: (state) => {\n      state.total = state.subtotal - state.subtotal * state.discount + state.delivery;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(loadCart.fulfilled, (state, action) => {\n      console.log('Cart loaded from database:', action.payload);\n      state.items = action.payload;\n    });\n  },\n});\n\nexport const {\n  addToCart,\n  removeFromCart,\n  updateQuantity,\n  clearCart,\n  calculateSubtotal,\n  updateDelivery,\n  applyDiscount,\n  getTotal,\n} = cartSlice.actions;\n\nexport default cartSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}