{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport productApi from '../../utils/api/productApi';\nexport const fetchProducts = createAsyncThunk('products/fetchProducts', async () => {\n  const products = await productApi.getProducts();\n  // console.log(products);\n  // const productSizes = await sizeApi.getProductSizes();\n  // const productSizesMap = productSizes.reduce((map, size) => {\n  //   if (!map[size.productID]) {\n  //     map[size.productID] = [];\n  //   }\n  //   map[size.productID].push(size);\n  //   return map;\n  // }, {});\n  // const productsWithSizes = products.map(product => {\n  //   const { productID } = product;\n  //   const sizes = productSizesMap[productID] || [];\n  //   const minPrice = Math.min(...sizes.map(({ price }) => price));\n  //   const inStock = sizes.length > 0;\n  //   return { ...product, sizes, defaultPrice: minPrice, inStock };\n  // });\n  console.log(products);\n  return products;\n});\nexport const fetchProductById = createAsyncThunk('products/fetchProductById', async productId => {\n  const product = await productApi.getProduct(productId);\n  return product;\n});\nexport const createProduct = createAsyncThunk('products/createProduct', async product => {\n  const createdProduct = await productApi.addProduct(product);\n  return createdProduct;\n});\nexport const updateExistingProduct = createAsyncThunk('products/updateExistingProduct', async _ref => {\n  let {\n    productId,\n    product\n  } = _ref;\n  const updatedProduct = await productApi.updateProduct(productId, product);\n  return updatedProduct;\n});\nexport const removeProduct = createAsyncThunk('products/removeProduct', async productId => {\n  const deletedProduct = await productApi.deleteProduct(productId);\n  return deletedProduct;\n});","map":{"version":3,"names":["createAsyncThunk","productApi","fetchProducts","products","getProducts","console","log","fetchProductById","productId","product","getProduct","createProduct","createdProduct","addProduct","updateExistingProduct","_ref","updatedProduct","updateProduct","removeProduct","deletedProduct","deleteProduct"],"sources":["C:/Users/Surface/Documents/Pal/myproject/ecommerce-app-ms-sql-net-react-main/frontend/src/store/actions/productActions.js"],"sourcesContent":["\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport productApi from '../../utils/api/productApi';\n\nexport const fetchProducts = createAsyncThunk(\n  'products/fetchProducts',\n  async () => {\n    const products = await productApi.getProducts();\n    // console.log(products);\n    // const productSizes = await sizeApi.getProductSizes();\n    // const productSizesMap = productSizes.reduce((map, size) => {\n    //   if (!map[size.productID]) {\n    //     map[size.productID] = [];\n    //   }\n    //   map[size.productID].push(size);\n    //   return map;\n    // }, {});\n    // const productsWithSizes = products.map(product => {\n    //   const { productID } = product;\n    //   const sizes = productSizesMap[productID] || [];\n    //   const minPrice = Math.min(...sizes.map(({ price }) => price));\n    //   const inStock = sizes.length > 0;\n    //   return { ...product, sizes, defaultPrice: minPrice, inStock };\n    // });\n    console.log(products);\n    return products;\n  }\n);\n\n\n  export const fetchProductById = createAsyncThunk('products/fetchProductById', async (productId) => {\n    const product = await productApi.getProduct(productId);\n    return product;\n  });\n  \n  export const createProduct = createAsyncThunk('products/createProduct', async (product) => {\n    const createdProduct = await productApi.addProduct(product);\n    return createdProduct;\n  });\n  \n  export const updateExistingProduct = createAsyncThunk(\n    'products/updateExistingProduct',\n    async ({ productId, product }) => {\n      const updatedProduct = await productApi.updateProduct(productId, product);\n      return updatedProduct;\n    }\n  );\n  \n  export const removeProduct = createAsyncThunk('products/removeProduct', async (productId) => {\n    const deletedProduct = await productApi.deleteProduct(productId);\n    return deletedProduct;\n  });"],"mappings":"AACA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,OAAOC,UAAU,MAAM,4BAA4B;AAEnD,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAC3C,wBAAwB,EACxB,YAAY;EACV,MAAMG,QAAQ,GAAG,MAAMF,UAAU,CAACG,WAAW,EAAE;EAC/C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;EACrB,OAAOA,QAAQ;AACjB,CAAC,CACF;AAGC,OAAO,MAAMI,gBAAgB,GAAGP,gBAAgB,CAAC,2BAA2B,EAAE,MAAOQ,SAAS,IAAK;EACjG,MAAMC,OAAO,GAAG,MAAMR,UAAU,CAACS,UAAU,CAACF,SAAS,CAAC;EACtD,OAAOC,OAAO;AAChB,CAAC,CAAC;AAEF,OAAO,MAAME,aAAa,GAAGX,gBAAgB,CAAC,wBAAwB,EAAE,MAAOS,OAAO,IAAK;EACzF,MAAMG,cAAc,GAAG,MAAMX,UAAU,CAACY,UAAU,CAACJ,OAAO,CAAC;EAC3D,OAAOG,cAAc;AACvB,CAAC,CAAC;AAEF,OAAO,MAAME,qBAAqB,GAAGd,gBAAgB,CACnD,gCAAgC,EAChC,MAAAe,IAAA,IAAkC;EAAA,IAA3B;IAAEP,SAAS;IAAEC;EAAQ,CAAC,GAAAM,IAAA;EAC3B,MAAMC,cAAc,GAAG,MAAMf,UAAU,CAACgB,aAAa,CAACT,SAAS,EAAEC,OAAO,CAAC;EACzE,OAAOO,cAAc;AACvB,CAAC,CACF;AAED,OAAO,MAAME,aAAa,GAAGlB,gBAAgB,CAAC,wBAAwB,EAAE,MAAOQ,SAAS,IAAK;EAC3F,MAAMW,cAAc,GAAG,MAAMlB,UAAU,CAACmB,aAAa,CAACZ,SAAS,CAAC;EAChE,OAAOW,cAAc;AACvB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}