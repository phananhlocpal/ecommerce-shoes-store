{"ast":null,"code":"import axios from 'axios';\nimport { variables } from './variables.js';\nimport jwtDecode from 'jwt-decode';\nconst API_URL = variables.CUSTOMER_API;\nconst API_URL_AUTHEN = variables.AUTHEN_API;\nconst API_URL_CART = variables.CART_API;\nconst API_URL_CART_ITEM = variables.CART_ITEM_API;\nconst getUsers = async () => {\n  const response = await axios.get(API_URL);\n  return response.data;\n};\nconst getUser = async user => {\n  const response = await axios.get(`${API_URL}/${user.customerID}`);\n  return response.data;\n};\nconst createUser = async user => {\n  const response = await axios.post(API_URL, user);\n  return response.data;\n};\nconst updateUser = async (userId, user) => {\n  const response = await axios.put(`${API_URL}/${userId}`, user);\n  return response.data;\n};\nconst deleteUser = async userId => {\n  const response = await axios.delete(`${API_URL}/${userId}`);\n  return response.data;\n};\nconst getCartByUserId = async userId => {\n  try {\n    const response = await axios.get(`${API_URL_CART}/${userId}`);\n    console.log('response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching cart:', error);\n    return null;\n  }\n};\nconst login = async loginData => {\n  try {\n    const response = await axios.post(`${API_URL_AUTHEN}/login-customer`, loginData);\n    if (response.data.token) {\n      // Lấy userId từ response và lấy cartId của người dùng\n      const userId = response.data.id;\n      const cart = await getCartByUserId(userId); // Lấy cartId thông qua userId\n\n      if (cart) {\n        const cartId = cart.cartID;\n        // Lưu cartId vào localStorage hoặc redux state nếu cần\n        localStorage.setItem('cartId', cartId);\n      }\n\n      // Kiểm tra xem session Storage có lưu cartItem hay ko?\n      const data = JSON.parse(sessionStorage.getItem('cartItems'));\n      if (data && Array.isArray(data)) {\n        const cartItems = data.map(item => ({\n          customerId: userId,\n          productSizeID: item.productSizeID,\n          quantity: item.quantity\n        }));\n        try {\n          for (const cartItem of cartItems) {\n            // Gửi từng cartItem lên server\n            await axios.post(`${API_URL_CART_ITEM}/updateSession`, cartItem);\n          }\n\n          // Xóa cartItems khỏi sessionStorage sau khi hoàn thành\n          sessionStorage.removeItem('cartItems');\n          console.log('Cart items have been successfully updated to the server.');\n        } catch (error) {\n          console.error('Error updating cart items to the server:', error);\n        }\n      } else {\n        console.log('No cart items found in sessionStorage.');\n      }\n      return {\n        userId,\n        cartId: cart ? cart.cartID : null\n      };\n    }\n    return {\n      token: null\n    };\n  } catch (error) {\n    if (error.response && error.response.status === 401) {\n      alert('Invalid email or password');\n    } else {\n      alert('An error occurred');\n    }\n    return {\n      token: null\n    };\n  }\n};\nexport default {\n  login,\n  getUser,\n  getUsers,\n  createUser,\n  updateUser,\n  deleteUser\n};","map":{"version":3,"names":["axios","variables","jwtDecode","API_URL","CUSTOMER_API","API_URL_AUTHEN","AUTHEN_API","API_URL_CART","CART_API","API_URL_CART_ITEM","CART_ITEM_API","getUsers","response","get","data","getUser","user","customerID","createUser","post","updateUser","userId","put","deleteUser","delete","getCartByUserId","console","log","error","login","loginData","token","id","cart","cartId","cartID","localStorage","setItem","JSON","parse","sessionStorage","getItem","Array","isArray","cartItems","map","item","customerId","productSizeID","quantity","cartItem","removeItem","status","alert"],"sources":["C:/Users/Surface/Documents/Pal/myproject/ecommerce-app-ms-sql-net-react-main/frontend/src/utils/api/userApi.js"],"sourcesContent":["import axios from 'axios';\nimport { variables } from './variables.js';\nimport jwtDecode from 'jwt-decode';\n\nconst API_URL = variables.CUSTOMER_API\nconst API_URL_AUTHEN = variables.AUTHEN_API\nconst API_URL_CART = variables.CART_API;\nconst API_URL_CART_ITEM = variables.CART_ITEM_API;\n\nconst getUsers = async () => {\n  const response = await axios.get(API_URL);\n  return response.data;\n}\n\nconst getUser = async (user) => {\n  const response = await axios.get(`${API_URL}/${user.customerID}`);\n  return response.data;\n}\n\nconst createUser = async (user) => {\n  const response = await axios.post(API_URL, user);\n  return response.data;\n}\n\nconst updateUser = async (userId, user) => {\n  const response = await axios.put(`${API_URL}/${userId}`, user);\n  return response.data;\n}\n\nconst deleteUser = async (userId) => {\n  const response = await axios.delete(`${API_URL}/${userId}`);\n  return response.data;\n}\n\nconst getCartByUserId = async (userId) => {\n  try {\n    const response = await axios.get(`${API_URL_CART}/${userId}`);\n    console.log('response', response.data);\n    return response.data; \n  } catch (error) {\n    console.error('Error fetching cart:', error);\n    return null;\n  }\n};\n\nconst login = async (loginData) => {\n  try {\n    const response = await axios.post(`${API_URL_AUTHEN}/login-customer`, loginData);\n    if (response.data.token) {\n      // Lấy userId từ response và lấy cartId của người dùng\n      const userId = response.data.id;\n      const cart = await getCartByUserId(userId); // Lấy cartId thông qua userId\n\n      if (cart) {\n        const cartId = cart.cartID; \n        // Lưu cartId vào localStorage hoặc redux state nếu cần\n        localStorage.setItem('cartId', cartId);\n      }\n\n      // Kiểm tra xem session Storage có lưu cartItem hay ko?\n      const data = JSON.parse(sessionStorage.getItem('cartItems'));\n\n      if (data && Array.isArray(data)) {\n        const cartItems = data.map((item) => ({\n          customerId: userId,\n          productSizeID: item.productSizeID,\n          quantity: item.quantity,\n        }));\n      \n        try {\n          for (const cartItem of cartItems) {\n            // Gửi từng cartItem lên server\n            await axios.post(`${API_URL_CART_ITEM}/updateSession`, cartItem);\n          }\n      \n          // Xóa cartItems khỏi sessionStorage sau khi hoàn thành\n          sessionStorage.removeItem('cartItems');\n          console.log('Cart items have been successfully updated to the server.');\n        } catch (error) {\n          console.error('Error updating cart items to the server:', error);\n        }\n      } else {\n        console.log('No cart items found in sessionStorage.');\n      }\n      \n      return { userId, cartId: cart ? cart.cartID : null }; \n    }\n    return { token: null };\n  } catch (error) {\n    if (error.response && error.response.status === 401) {\n      alert('Invalid email or password');\n    } else {\n      alert('An error occurred');\n    }\n    return { token: null };\n  }\n};\n\nexport default {\n  login,\n  getUser,\n  getUsers,\n  createUser,\n  updateUser,\n  deleteUser\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}